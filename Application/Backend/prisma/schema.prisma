//Fichier qui se connecte a la db, et transforme les modèles en tables. Prisma s'en sert pour créer les tables ou les modifier.
//Fichier a modifier lorsqu'il y'aura plusieurs utilisateurs, donc une filtration, et un système de "ownership" par utilisateurs.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id         String    @id @default(cuid()) // ID auto (évite d'avoir à l'envoyer)
  title      String
  note       String?
  finishedAt DateTime?

  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt // auto-mis à jour par Prisma
  items     WorkoutItem[]

  // back-relation vers PlanningJour
  PlanningJour PlanningJour[]
}

model Planning {
  id    String         @id @default(cuid())
  nom   String
  debut DateTime
  fin   DateTime
  //  relation
  jours PlanningJour[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PlanningJourStatus {
  PLANNED
  DONE
}

model PlanningJour {
  id   String   @id @default(cuid())
  date DateTime
  note String?

  // relations
  planning   Planning @relation(fields: [planningId], references: [id], onDelete: Cascade)
  planningId String

  workout   Workout @relation(fields: [workoutId], references: [id], onDelete: Restrict)
  workoutId String

  // suivi d'execution
  status PlanningJourStatus @default(PLANNED)
  doneAt DateTime?

  // empecher le meme Workout 2x le meme jour dans un meme planning
  @@unique([planningId, date, workoutId])
  // index pour requetes rapides par jour
  @@index([planningId, date])
}

model Utilisateur {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  mfaEnabled     Boolean   @default(false)
  mfaSecret      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt 

  refreshTokens  RefreshToken[]
}

model RefreshToken {
  id              String        @id @default(cuid())
  utilisateurId   String
  tokenHash       String
  revoked         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  revokedAt       DateTime?

  utilisateur     Utilisateur   @relation(fields : [utilisateurId], references:  [id])

  @@index([utilisateurId, revoked])
  @@map("refresh_tokens")
}
model Exercise {
  id              String   @id @default(cuid())
  slug            String   @unique // eg. "bench"
  name            String
  primaryMuscle   String
  secondaryMuscle String?
  equipment       String?
  level           String?
  instructions    String?
  mediaUrl        String?
  source          String? // "ExerciseDB" | "wger" | "manual"
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items WorkoutItem[]

  @@index([primaryMuscle])
  @@index([equipment])
}

model WorkoutItem {
  id         String @id @default(cuid())
  order      Int
  workoutId  String
  exerciseId String

  workout  Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  exercise Exercise     @relation(fields: [exerciseId], references: [id], onDelete: Restrict)
  sets     WorkoutSet[]

  @@unique([workoutId, order]) // pas deux items au même ordre dans une séance
  @@index([exerciseId])
}

model WorkoutSet {
  id     String @id @default(cuid())
  reps   Int
  weight Float?
  rest   Int?
  rpe    Float?

  workoutItemId String
  item          WorkoutItem @relation(fields: [workoutItemId], references: [id], onDelete: Cascade)

  @@index([workoutItemId])
}

model Utilisateur {
  id             String    @id @default(cuid())
  email          String    @unique
  password       String
  firstName      String
  lastName       String
  mfaEnabled     Boolean   @default(false)
  mfaSecret      String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt 

  refreshTokens  RefreshToken[]
}

model RefreshToken {
  id              String        @id @default(cuid())
  utilisateurId   String
  tokenHash       String
  revoked         Boolean       @default(false)
  createdAt       DateTime      @default(now())
  revokedAt       DateTime?

  utilisateur     Utilisateur   @relation(fields : [utilisateurId], references:  [id])

  @@index([utilisateurId, revoked])
  @@map("refresh_tokens")
}