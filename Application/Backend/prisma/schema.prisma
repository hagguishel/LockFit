generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workout {
  id           String         @id @default(cuid())
  title        String
  note         String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  finishedAt   DateTime?
  PlanningJour PlanningJour[]
  items        WorkoutItem[]
}

model Planning {
  id        String         @id @default(cuid())
  nom       String
  debut     DateTime
  fin       DateTime
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  jours     PlanningJour[]
}

model PlanningJour {
  id         String             @id @default(cuid())
  date       DateTime
  note       String?
  planningId String
  workoutId  String
  doneAt     DateTime?
  status     PlanningJourStatus @default(PLANNED)
  planning   Planning           @relation(fields: [planningId], references: [id], onDelete: Cascade)
  workout    Workout            @relation(fields: [workoutId], references: [id])

  @@unique([planningId, date, workoutId])
  @@index([planningId, date])
}

model Utilisateur {
  id            String         @id @default(cuid())
  email         String         @unique
  password      String
  firstName     String
  lastName      String
  mfaEnabled    Boolean        @default(false)
  mfaSecret     String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  MfaChallenge  MfaChallenge[]
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id            String      @id @default(cuid())
  utilisateurId String
  tokenHash     String
  revoked       Boolean     @default(false)
  createdAt     DateTime    @default(now())
  revokedAt     DateTime?
  expiresAt     DateTime
  jti           String      @unique
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id])

  @@index([utilisateurId, revoked])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

/// Challenge MFA "code à 6 chiffre" envoyé à l'utilisateur (mail/SMS)
model MfaChallenge {
  id            String      @id @default(cuid())
  /// L'utilisateur concerné (relation obligatoire)
  utilisateurId String
  /// Liaison temporaire entre /auth/login (MFA requis) et /auth/mfa/verify
  /// Sert de "ticket" court, indépendant de l'ID utilisateur.
  tempSessionId String      @unique
  /// Code à 6 chiffres (ex: “123456”). On peut le stocker en clair côté dev ;
  /// en prod, tu peux hasher si tu veux pousser la sécurité (coût supplémentaire).
  code          String
  /// Validité du challenge (ex: now + 300s)
  expiresAt     DateTime
  /// Indique si le challenge a été consommé (évite les replays)
  used          Boolean     @default(false)
  createdAt     DateTime    @default(now())
  utilisateur   Utilisateur @relation(fields: [utilisateurId], references: [id], onDelete: Cascade)

  @@index([utilisateurId])
  @@index([expiresAt])
}

model Exercise {
  id              String        @id @default(cuid())
  slug            String        @unique
  name            String
  primaryMuscle   String
  secondaryMuscle String?
  equipment       String?
  level           String?
  instructions    String?
  mediaUrl        String?
  source          String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  items           WorkoutItem[]

  @@index([primaryMuscle])
  @@index([equipment])
}

model WorkoutItem {
  id         String       @id @default(cuid())
  order      Int
  workoutId  String
  exerciseId String
  exercise   Exercise     @relation(fields: [exerciseId], references: [id])
  workout    Workout      @relation(fields: [workoutId], references: [id], onDelete: Cascade)
  sets       WorkoutSet[]

  @@unique([workoutId, order])
  @@index([exerciseId])
}

model WorkoutSet {
  id            String      @id @default(cuid())
  reps          Int
  weight        Float?
  rest          Int?
  rpe           Float?
  workoutItemId String
  item          WorkoutItem @relation(fields: [workoutItemId], references: [id], onDelete: Cascade)

  @@index([workoutItemId])
}

enum PlanningJourStatus {
  PLANNED
  DONE
}
