// src/lib/tokenStorage.ts
// ========================
// Gestion s√©curis√©e des tokens avec expo-secure-store
// ========================

import * as SecureStore from 'expo-secure-store';
import { Platform } from 'react-native';

const ACCESS_KEY = 'if_tokens_access';
const REFRESH_KEY = 'if_tokens_refresh';

// ‚ö†Ô∏è IMPORTANT : m√™mes options en set/get/delete, sinon la lecture √©choue
const STORE_OPTS = Platform.OS === 'ios' ? { keychainService: 'lockfit' } : undefined;

export type StoredTokens = { access: string; refresh?: string | null };

/** Sauvegarde les jetons (refresh optionnel) */
export async function saveTokens(tokens: { access: string; refresh?: string | null }) {
  console.log('üíæ [STORAGE] D√©but sauvegarde tokens...', { hasAccess: !!tokens.access, hasRefresh: !!tokens.refresh });

  // Nettoyage pr√©alable (√©vite un ancien refresh r√©siduel)
  await SecureStore.deleteItemAsync(ACCESS_KEY, STORE_OPTS);
  await SecureStore.deleteItemAsync(REFRESH_KEY, STORE_OPTS);

  await SecureStore.setItemAsync(ACCESS_KEY, tokens.access, STORE_OPTS);
  if (tokens.refresh) {
    await SecureStore.setItemAsync(REFRESH_KEY, tokens.refresh, STORE_OPTS);
  }

  const verify = await loadTokens();
  console.log('üîé [STORAGE] V√©rif apr√®s √©criture:', { access: !!verify?.access, refresh: !!verify?.refresh });

  // Ne bloque pas sur l‚Äôabsence de refresh : l‚Äôaccess suffit pour √™tre ‚Äúauth‚Äù
  if (!verify?.access) throw new Error("Impossible de v√©rifier l‚Äôaccess token apr√®s √©criture");
  console.log('‚úÖ [STORAGE] Tokens v√©rifi√©s');
}

/** Lecture des jetons */
export async function loadTokens(): Promise<StoredTokens | null> {
  const access  = await SecureStore.getItemAsync(ACCESS_KEY, STORE_OPTS);
  const refresh = await SecureStore.getItemAsync(REFRESH_KEY, STORE_OPTS);
  if (!access && !refresh) {
    console.log('‚ö†Ô∏è [STORAGE] Tokens manquants:', { hasAccess: false, hasRefresh: false });
    return null;
  }
  return { access: access ?? '', refresh: refresh ?? null };
}

/** Suppression (logout) */
export async function clearTokens() {
  await SecureStore.deleteItemAsync(ACCESS_KEY, STORE_OPTS);
  await SecureStore.deleteItemAsync(REFRESH_KEY, STORE_OPTS);
}
